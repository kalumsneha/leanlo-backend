name: Build and Deployment Pipeline
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build-and-deploy:
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Start PostgreSQL on Ubuntu
        run: |
          sudo systemctl start postgresql.service
          pg_isready

      - name: Create additional user
        run: |
          sudo -u postgres psql --command="CREATE USER learnlo_admin PASSWORD 'Password12'" --command="\du"

      - name: Create additional database
        run: |
          sudo -u postgres createdb learnlo_lms --owner=learnlo_admin 
          PGPASSWORD=Password12 

      - name: Build Project
        run: mvn clean install

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: learnlo-backend
          path: '${{ github.workspace }}/target/*.jar'

      - name: Run Tests
        run: mvn test
          
# Step 4: login to docker hub using credentials set in github
# secrets described in previous section
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

# Step 5: Set up QEMU in order to be able to run docker daemon
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: github.ref == 'refs/heads/main'

# Step 6: Set up docker build functionality
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3
        if: github.ref == 'refs/heads/main'

# Step 7: build docker image and push it to docker hub
      - name: Build and push
        uses: docker/build-push-action@v5
        if: github.ref == 'refs/heads/main'
        with:
          context: .
          push: true
          tags: wmsfernando/learnlo-api:latest

# Step 8: Authenticate to google cloud
      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
        if: github.ref == 'refs/heads/main'

# Step 9: Deploy our app to google cloud
      - id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: 'learnlo-api2'
          flags: '--allow-unauthenticated'
          image: 'wmsfernando/learnlo-api:latest'
          env_vars: |
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_CLOUD_SQL_INSTANCE=${{ secrets.DB_CLOUD_SQL_INSTANCE }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_USERNAME=${{ secrets.DB_USER }}
        if: github.ref == 'refs/heads/main'

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v3
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: 'us-east-1'
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          mask-password: 'true'
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#          REPOSITORY: learnlo-backend
#        run: |
#          # Build a docker container and
#          # push it to ECR so that it can
#          # be deployed to ECS.
#          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: learnlo-app-task-definition.json
#          container-name: learnlo-backend
#          image: ${{ steps.build-image.outputs.image }}
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: learnlo-backend-service
#          cluster: DevCluster2
#          wait-for-service-stability: true